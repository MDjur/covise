<MapColorsSpheres>
<version min="120" max="120" profile="compatibility" />
<attribute name="dataAttrib" type="float" value="10"/>
<attribute name="radiusAttrib" type="float" value="11"/>

<uniform name="textureValid" type="bool" value="false"/>
<uniform name="dataValid" type="bool" value="false"/>
<uniform name="rangeMin" type="float" value="0."/>
<uniform name="rangeMax" type="float" value="1."/>
<uniform name="texUnit1" type="sampler1D" value="0"/>
<uniform name="blendWithMaterial" type="bool" value="false"/>
<uniform name="Light0Enabled" type="bool" value="true"/>
<uniform name="Light1Enabled" type="bool" value="false"/>

<!-- generate viewer facing triangle strip covering sphere, raycast in fragment shader -->
<vertexProgram>
uniform bool textureValid;
uniform bool dataValid;
uniform float rangeMin, rangeMax;
uniform sampler1D texUnit1;

attribute float dataAttrib;
attribute float radiusAttrib;

varying vec4 color;
varying float radius;

void main (void)
{
    radius = radiusAttrib;
    color = vec4(0.8, 0.8, 0.8, 1);
    if (textureValid) {
        color = texture1D(texUnit1, gl_MultiTexCoord0.s);
    } else if (dataValid) {
        float data = dataAttrib;
        float t = (data - rangeMin) / (rangeMax - rangeMin);
        color = texture1D(texUnit1, t);
    }

    gl_Position = gl_Vertex;
    gl_ClipVertex = ftransform();
}
</vertexProgram>

<geometryProgram inputType="POINTS" outputType="TRIANGLE_STRIP" numVertices="4">
#extension GL_EXT_geometry_shader4 : enable

varying in vec4 color[];
varying in float radius[];

varying out vec4 vColor;
varying out float vRadius;
varying out vec3 vObj;
varying out vec3 vDir;
varying out vec3 vCam;

void main()
{
    mat4 MVP = gl_ModelViewProjectionMatrix;

    vObj = gl_PositionIn[0].xyz;
    vColor = color[0];
    vRadius = radius[0];
	vCam = gl_ModelViewMatrixInverse[3].xyz;

    vec3 camUp = gl_ModelViewMatrix[1].xyz;

    vec3 oc_pos = vObj - vCam;
    float sqrRad = vRadius * vRadius;
    float dd = dot(oc_pos, oc_pos);
    float s = sqrRad / dd;
    float vi = vRadius / sqrt(1.0f - s);
    vec3 vr = normalize(cross(oc_pos, camUp)) * vi;
    vec3 vu = normalize(cross(oc_pos, vr)) * vi;

    vec3 pos = vObj - vr - vu;
    vDir = pos - vCam;
    gl_Position = MVP * vec4(pos, 1.f);
    EmitVertex();

    pos = vObj + vr - vu;
    vDir = pos - vCam;
    gl_Position = MVP * vec4(pos, 1.f);
    EmitVertex();

    pos = vObj - vr + vu;
    vDir = pos - vCam;
    gl_Position = MVP * vec4(pos, 1.f);
    EmitVertex();

    pos = vObj + vr + vu;
    vDir = pos - vCam;
    gl_Position = MVP * vec4(pos, 1.f);
    EmitVertex();

    EndPrimitive();
}
</geometryProgram>
<fragmentProgram>
varying vec4 vColor;
varying vec3 vObj;
varying vec3 vCam;
varying vec3 vDir;
varying float vRadius;

uniform bool blendWithMaterial;
uniform bool Light0Enabled, Light1Enabled;
uniform bool dataValid;
uniform bool textureValid;

vec4 Ambient;
vec4 Diffuse;
vec4 Specular;

void directionalLight(in int i, in vec3 normal)
{
   float nDotVP;         // normal . light direction
   float nDotHV;         // normal . light half vector
   float pf;             // power factor

   nDotVP = abs(dot(normal, normalize(vec3(gl_LightSource[i].position))));
   nDotHV = abs(dot(normal, vec3(gl_LightSource[i].halfVector)));

   if (nDotVP == 0.0)
   {
       pf = 0.0;
   }
   else
   {
       pf = pow(nDotHV, gl_FrontMaterial.shininess);
   }
   Ambient  += gl_LightSource[i].ambient;
   Diffuse  += gl_LightSource[i].diffuse * nDotVP;
   Specular += gl_LightSource[i].specular * pf;
}

void pointLight(in int i, in vec3 pos, in vec3 N, in vec3 eye)
{
   float pf;           // power factor
   float d;            // distance from surface to light source

   vec3 L = normalize(gl_LightSource[i].position.xyz - pos);
   float NdotL = abs(dot(N, L));
   if (NdotL == 0.0)
   {
       pf = 0.0;
   }
   else
   {
       vec3 E = normalize(-pos);
       vec3 R = normalize(-reflect(L, N));
       pf = pow(abs(dot(R, E)), gl_FrontMaterial.shininess);
   }


   // Compute distance between surface and light position
   d = length(L);

   // Compute attenuation
   float attenuation = 1.0 / (gl_LightSource[i].constantAttenuation +
       gl_LightSource[i].linearAttenuation * d +
       gl_LightSource[i].quadraticAttenuation * d * d);

   Ambient  += gl_LightSource[i].ambient * attenuation;
   Diffuse  += gl_LightSource[i].diffuse * NdotL * attenuation;
   Specular += gl_LightSource[i].specular * pf * attenuation;
}

void flight(in vec3 pos, in vec3 normal)
{
    vec3 eye = vec3 (0.0, 0.0, 1.0);

    // Clear the light intensity accumulators
    Ambient  = vec4 (0.0);
    Diffuse  = vec4 (0.0);
    Specular = vec4 (0.0);

    if (Light0Enabled)
        pointLight(0, pos, normal, eye);
    if (Light1Enabled)
        pointLight(1, pos, normal, eye);

    //directionalLight(2, normal);
}

void main()
{
    vec3 org = vCam;
    vec3 dir = normalize(vDir);

    vec3 oc = org - vObj;
    float phalf = dot(oc, dir);
    float q = dot(oc, oc) - vRadius*vRadius;
    float D = phalf * phalf - q;
    if (D &lt; 0.0f)
        discard;

    float t = -phalf - sqrt(D);
    vec3 pos = org + (t * dir);
#ifdef CORRECT_DEPTH
    vec4 fragPos = gl_ModelViewProjectionMatrix * vec4(pos, 1.f);
    float far = gl_DepthRange.far;
    float near = gl_DepthRange.near;
    gl_FragDepth = (((far-near) * fragPos.z/fragPos.w) + near + far) / 2.0;
#endif

    vec3 N = pos - vObj;
    flight(pos, normalize(N));

    if (dataValid || textureValid)
    {
        vec4 color = vColor * (Diffuse + Ambient) + Specular * vColor.a;
        if (blendWithMaterial)
        {
            color = mix(gl_FrontMaterial.diffuse, color, color.a);
            color.a = 1.0;
        }
        else
        {
            color.a = vColor.a;
        }
        gl_FragColor = color;
    }
    else
    {
        gl_FragColor = gl_FrontMaterial.diffuse * Diffuse + gl_FrontMaterial.ambient * Ambient + gl_FrontMaterial.specular * Specular;
    }
}
</fragmentProgram>

</MapColorsSpheres>
