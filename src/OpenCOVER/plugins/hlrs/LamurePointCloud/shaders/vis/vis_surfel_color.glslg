// ===================== Geometry Shader =====================
#version 420 core

INCLUDE vis_surfel_util.glsl

layout(points) in;
layout(triangle_strip, max_vertices = 4) out;

in VertexData {
    vec3  pass_ms_u;         // Halbachse U (WS, Radius)
    vec3  pass_ms_v;         // Halbachse V (WS, Radius)
    vec3  pass_point_color;
    vec3  pass_world_pos;
    vec3  pass_normal_ws;
    vec3  pass_vs_pos;
    vec3  pass_vs_normal;
    float pass_radius_ws;    // Durchmesser (WS) vor Pixel-CLAMP (0 bei Cut)
} VertexIn[];

uniform mat4  mvp_matrix;
uniform mat4  model_view_matrix;

// Pixel-CLAMP
uniform float min_screen_size;     // Pixel-Durchmesser
uniform float max_screen_size;     // Pixel-Durchmesser
uniform float scale_projection;  // Welt -> Pixel (nutzt |w| am Zentrum)

out FS_IN {
    vec3  pass_point_color;
    vec2  pass_uv_coords;
    vec3  pass_world_pos;
    vec3  pass_normal_ws;
    vec3  pass_vs_pos;
    vec3  pass_vs_normal;
    float pass_radius_ws;    // effektiver WS-Durchmesser nach Pixel-CLAMP
    float pass_screen_size;  // Pixel-Durchmesser nach Pixel-CLAMP
} gOut;

void main() {
    // Weiterreichen (flat)
    gOut.pass_point_color = VertexIn[0].pass_point_color;
    gOut.pass_world_pos   = VertexIn[0].pass_world_pos;
    gOut.pass_normal_ws   = VertexIn[0].pass_normal_ws;
    gOut.pass_vs_pos      = VertexIn[0].pass_vs_pos;
    gOut.pass_vs_normal   = VertexIn[0].pass_vs_normal;

    // Quad in Welt
    vec3 center = VertexIn[0].pass_world_pos;
    vec3 step_u = VertexIn[0].pass_ms_u; // Radius
    vec3 step_v = VertexIn[0].pass_ms_v; // Radius

    // Skalierung und Culling mit der neuen Hilfsfunktion
    float pixel_diameter, world_radius;
    if (!scale_surfel_for_screen(
        center,
        model_view_matrix,
        scale_projection,
        min_screen_size,
        max_screen_size,
        step_u,
        step_v,
        pixel_diameter,
        world_radius
    )) {
        return;
    }

    // Werte f√ºr FS
    gOut.pass_radius_ws   = world_radius;
    gOut.pass_screen_size = pixel_diameter;

    // Quad-Ecken & UVs
    vec3 offs[4] = vec3[4](
        -step_u - step_v,
         step_u - step_v,
        -step_u + step_v,
         step_u + step_v
    );
    vec2 uvs[4] = vec2[4](
        vec2(-1.0, -1.0),
        vec2( 1.0, -1.0),
        vec2(-1.0,  1.0),
        vec2( 1.0,  1.0)
    );

    for (int i = 0; i < 4; ++i) {
        gOut.pass_uv_coords = uvs[i];
        gl_Position = mvp_matrix * vec4(center + offs[i], 1.0);
        EmitVertex();
    }
    EndPrimitive();
}
