#ifndef __FWDState_h
#define __FWDState_h

class FWDState
{
public:
	FWDState();
	
	double vX;
	double vY;
	double vZ;
	double vYaw;
	double vRoll;
	double vPitch;
	double vSuspZFL;
	double vSuspZFR;
	double vSuspZRR;
	double vSuspZRL;
	double OmegaYFL;
	double OmegaYFR;
	double OmegaYRR;
	double OmegaYRL;
	double OmegaZFL;
	double OmegaZFR;
	double phiDotFL1;
	double phiDotFL2;
	double phiDotFL3;
	double phiDotFR1;
	double phiDotFR2;
	double phiDotFR3;
	double phiDotRR1;
	double phiDotRR2;
	double phiDotRR3;
	double phiDotRL1;
	double phiDotRL2;
	double phiDotRL3;
	double engineRPM;
	double TcolumnCombined;
	double Tclutch;
	double TclutchMax;
	double slipFL;
	double slipFR;
	double slipRR;
	double slipRL;
	double FweightedFL;
	double FweightedFR;
	double FweightedRR;
	double FweightedRL;
	double FtireFL;
	double FtireFR;
	double FtireRR;
	double FtireRL;
	double FxFL;
	double FxFR;
	double FxRR;
	double FxRL;
	double FyFL;
	double FyFR;
	double FyRR;
	double FyRL;
	double genericOut1;
	double genericOut2;
	double genericOut3;
	double genericOut4;
	double genericOut5;
	double genericOut6;
	double genericOut7;
	double genericOut8;
	double genericOut9;
	double genericOut10;
	double genericOut11;
	double genericOut12;
	double genericOut13;
	double genericOut14;
	double genericOut15;
	double genericOut16;
	
	void limitSpeeds();
	void threshold();
	
	FWDState operator+(const FWDState& other)
	{
		FWDState resultState;
		resultState.vX = vX + other.vX;
		resultState.vY = vY + other.vY;
		resultState.vZ = vZ + other.vZ;
		resultState.vYaw = vYaw + other.vYaw;
		resultState.vRoll = vRoll + other.vRoll;
		resultState.vPitch = vPitch + other.vPitch;
		resultState.vSuspZFL = vSuspZFL + other.vSuspZFL;
		resultState.vSuspZFR = vSuspZFR + other.vSuspZFR;
		resultState.vSuspZRR = vSuspZRR + other.vSuspZRR;
		resultState.vSuspZRL = vSuspZRL + other.vSuspZRL;
		resultState.OmegaYFL = OmegaYFL + other.OmegaYFL;
		resultState.OmegaYFR = OmegaYFR + other.OmegaYFR;
		resultState.OmegaYRR = OmegaYRR + other.OmegaYRR;
		resultState.OmegaYRL = OmegaYRL + other.OmegaYRL;
		resultState.OmegaZFL = OmegaZFL + other.OmegaZFL;
		resultState.OmegaZFR = OmegaZFR + other.OmegaZFR;
		resultState.phiDotFL1 = phiDotFL1 + other.phiDotFL1;
		resultState.phiDotFL2 = phiDotFL2 + other.phiDotFL2;
		resultState.phiDotFL3 = phiDotFL3 + other.phiDotFL3;
		resultState.phiDotFR1 = phiDotFR1 + other.phiDotFR1;
		resultState.phiDotFR2 = phiDotFR2 + other.phiDotFR2;
		resultState.phiDotFR3 = phiDotFR3 + other.phiDotFR3;
		resultState.phiDotRR1 = phiDotRR1 + other.phiDotRR1;
		resultState.phiDotRR2 = phiDotRR2 + other.phiDotRR2;
		resultState.phiDotRR3 = phiDotRR3 + other.phiDotRR3;
		resultState.phiDotRL1 = phiDotRL1 + other.phiDotRL1;
		resultState.phiDotRL2 = phiDotRL2 + other.phiDotRL2;
		resultState.phiDotRL3 = phiDotRL3 + other.phiDotRL3;
		resultState.engineRPM = engineRPM + other.engineRPM;
		
		resultState.TcolumnCombined = TcolumnCombined + other.TcolumnCombined;
		resultState.Tclutch = Tclutch + other.Tclutch;
		resultState.TclutchMax = TclutchMax + other.TclutchMax;
		resultState.slipFL = slipFL + other.slipFL;
		resultState.slipFR = slipFR + other.slipFR;
		resultState.slipRR = slipRR + other.slipRR;
		resultState.slipRL = slipRL + other.slipRL;
		resultState.FweightedFL = FweightedFL + other.FweightedFL;
		resultState.FweightedFR = FweightedFR + other.FweightedFR;
		resultState.FweightedRR = FweightedRR + other.FweightedRR;
		resultState.FweightedRL = FweightedRL + other.FweightedRL;
		resultState.FtireFL = FtireFL + other.FtireFL;
		resultState.FtireFR = FtireFR + other.FtireFR;
		resultState.FtireRR = FtireRR + other.FtireRR;
		resultState.FtireRL = FtireRL + other.FtireRL;
		resultState.FxFL = FxFL + other.FxFL;
		resultState.FxFR = FxFR + other.FxFR;
		resultState.FxRR = FxRR + other.FxRR;
		resultState.FxRL = FxRL + other.FxRL;
		resultState.FyFL = FyFL + other.FyFL;
		resultState.FyFR = FyFR + other.FyFR;
		resultState.FyRR = FyRR + other.FyRR;
		resultState.FyRL = FyRL + other.FyRL;
		resultState.genericOut1 = genericOut1 + other.genericOut1;
		resultState.genericOut2 = genericOut2 + other.genericOut2;
		resultState.genericOut3 = genericOut3 + other.genericOut3;
		resultState.genericOut4 = genericOut4 + other.genericOut4;
		resultState.genericOut5 = genericOut5 + other.genericOut5;
		resultState.genericOut6 = genericOut6 + other.genericOut6;
		resultState.genericOut7 = genericOut7 + other.genericOut7;
		resultState.genericOut8 = genericOut8 + other.genericOut8;
		resultState.genericOut9 = genericOut9 + other.genericOut9;
		resultState.genericOut10 = genericOut10 + other.genericOut10;
		resultState.genericOut11 = genericOut11 + other.genericOut11;
		resultState.genericOut12 = genericOut12 + other.genericOut12;
		resultState.genericOut13 = genericOut13 + other.genericOut13;
		resultState.genericOut14 = genericOut14 + other.genericOut14;
		resultState.genericOut15 = genericOut15 + other.genericOut15;
		resultState.genericOut16 = genericOut16 + other.genericOut16;
		return resultState;
	};
	FWDState operator*(const double scalar)
	{
		FWDState resultState;
		resultState.vX = vX * scalar;
		resultState.vY = vY * scalar;
		resultState.vZ = vZ * scalar;
		resultState.vYaw = vYaw * scalar;
		resultState.vRoll = vRoll * scalar;
		resultState.vPitch = vPitch * scalar;
		resultState.vSuspZFL = vSuspZFL * scalar;
		resultState.vSuspZFR = vSuspZFR * scalar;
		resultState.vSuspZRR = vSuspZRR * scalar;
		resultState.vSuspZRL = vSuspZRL * scalar;
		resultState.OmegaYFL = OmegaYFL * scalar;
		resultState.OmegaYFR = OmegaYFR * scalar;
		resultState.OmegaYRR = OmegaYRR * scalar;
		resultState.OmegaYRL = OmegaYRL * scalar;
		resultState.OmegaZFL = OmegaZFL * scalar;
		resultState.OmegaZFR = OmegaZFR * scalar;
		resultState.phiDotFL1 = phiDotFL1 * scalar;
		resultState.phiDotFL2 = phiDotFL2 * scalar;
		resultState.phiDotFL3 = phiDotFL3 * scalar;
		resultState.phiDotFR1 = phiDotFR1 * scalar;
		resultState.phiDotFR2 = phiDotFR2 * scalar;
		resultState.phiDotFR3 = phiDotFR3 * scalar;
		resultState.phiDotRR1 = phiDotRR1 * scalar;
		resultState.phiDotRR2 = phiDotRR2 * scalar;
		resultState.phiDotRR3 = phiDotRR3 * scalar;
		resultState.phiDotRL1 = phiDotRL1 * scalar;
		resultState.phiDotRL2 = phiDotRL2 * scalar;
		resultState.phiDotRL3 = phiDotRL3 * scalar;
		resultState.engineRPM = engineRPM * scalar;
		
		resultState.TcolumnCombined = TcolumnCombined * scalar;
		resultState.Tclutch = Tclutch * scalar;
		resultState.TclutchMax = TclutchMax * scalar;
		resultState.slipFL = slipFL * scalar;
		resultState.slipFR = slipFR * scalar;
		resultState.slipRR = slipRR * scalar;
		resultState.slipRL = slipRL * scalar;
		resultState.FweightedFL = FweightedFL * scalar;
		resultState.FweightedFR = FweightedFR * scalar;
		resultState.FweightedRR = FweightedRR * scalar;
		resultState.FweightedRL = FweightedRL * scalar;
		resultState.FtireFL = FtireFL * scalar;
		resultState.FtireFR = FtireFR * scalar;
		resultState.FtireRR = FtireRR * scalar;
		resultState.FtireRL = FtireRL * scalar;
		resultState.FxFL = FxFL * scalar;
		resultState.FxFR = FxFR * scalar;
		resultState.FxRR = FxRR * scalar;
		resultState.FxRL = FxRL * scalar;
		resultState.FyFL = FyFL * scalar;
		resultState.FyFR = FyFR * scalar;
		resultState.FyRR = FyRR * scalar;
		resultState.FyRL = FyRL * scalar;
		resultState.genericOut1 = genericOut1 * scalar;
		resultState.genericOut2 = genericOut2 * scalar;
		resultState.genericOut3 = genericOut3 * scalar;
		resultState.genericOut4 = genericOut4 * scalar;
		resultState.genericOut5 = genericOut5 * scalar;
		resultState.genericOut6 = genericOut6 * scalar;
		resultState.genericOut7 = genericOut7 * scalar;
		resultState.genericOut8 = genericOut8 * scalar;
		resultState.genericOut9 = genericOut9 * scalar;
		resultState.genericOut10 = genericOut10 * scalar;
		resultState.genericOut11 = genericOut11 * scalar;
		resultState.genericOut12 = genericOut12 * scalar;
		resultState.genericOut13 = genericOut13 * scalar;
		resultState.genericOut14 = genericOut14 * scalar;
		resultState.genericOut15 = genericOut15 * scalar;
		resultState.genericOut16 = genericOut16 * scalar;
		return resultState;
	};
	FWDState & operator=(const FWDState &other)
	{
		
		vX = other.vX;
		vY = other.vY;
		vZ = other.vZ;
		vYaw = other.vYaw;
		vRoll = other.vRoll;
		vPitch = other.vPitch;
		vSuspZFL = other.vSuspZFL;
		vSuspZFR = other.vSuspZFR;
		vSuspZRR = other.vSuspZRR;
		vSuspZRL = other.vSuspZRL;
		OmegaYFL = other.OmegaYFL;
		OmegaYFR = other.OmegaYFR;
		OmegaYRR = other.OmegaYRR;
		OmegaYRL = other.OmegaYRL;
		OmegaZFL = other.OmegaZFL;
		OmegaZFR = other.OmegaZFR;
		phiDotFL1 = other.phiDotFL1;
		phiDotFL2 = other.phiDotFL2;
		phiDotFL3 = other.phiDotFL3;
		phiDotFR1 = other.phiDotFR1;
		phiDotFR2 = other.phiDotFR2;
		phiDotFR3 = other.phiDotFR3;
		phiDotRR1 = other.phiDotRR1;
		phiDotRR2 = other.phiDotRR2;
		phiDotRR3 = other.phiDotRR3;
		phiDotRL1 = other.phiDotRL1;
		phiDotRL2 = other.phiDotRL2;
		phiDotRL3 = other.phiDotRL3;
		engineRPM = other.engineRPM;
		
		TcolumnCombined = other.TcolumnCombined;
		Tclutch = other.Tclutch;
		TclutchMax = other.TclutchMax;
		slipFL = other.slipFL;
		slipFR = other.slipFR;
		slipRR = other.slipRR;
		slipRL = other.slipRL;
		FweightedFL = other.FweightedFL;
		FweightedFR = other.FweightedFR;
		FweightedRR = other.FweightedRR;
		FweightedRL = other.FweightedRL;
		FtireFL = other.FtireFL;
		FtireFR = other.FtireFR;
		FtireRR = other.FtireRR;
		FtireRL = other.FtireRL;
		FxFL = other.FxFL;
		FxFR = other.FxFR;
		FxRR = other.FxRR;
		FxRL = other.FxRL;
		FyFL = other.FyFL;
		FyFR = other.FyFR;
		FyRR = other.FyRR;
		FyRL = other.FyRL;
		genericOut1 = other.genericOut1;
		genericOut2 = other.genericOut2;
		genericOut3 = other.genericOut3;
		genericOut4 = other.genericOut4;
		genericOut5 = other.genericOut5;
		genericOut6 = other.genericOut6;
		genericOut7 = other.genericOut7;
		genericOut8 = other.genericOut8;
		genericOut9 = other.genericOut9;
		genericOut10 = other.genericOut10;
		genericOut11 = other.genericOut11;
		genericOut12 = other.genericOut12;
		genericOut13 = other.genericOut13;
		genericOut14 = other.genericOut14;
		genericOut15 = other.genericOut15;
		genericOut16 = other.genericOut16;
        return *this;
	};
};
#endif
