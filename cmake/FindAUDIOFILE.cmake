# - Find audiofile
# Find the audiofile includes and library
#
#  AUDIOFILE_INCLUDE_DIR - Where to find audiofile includes
#  AUDIOFILE_LIBRARIES   - List of libraries when using audiofile
#  AUDIOFILE_FOUND       - True if audiofile was found.

IF (AUDIOFILE_INCLUDE_DIR)
  SET(AUDIOFILE_FIND_QUIETLY TRUE)
ENDIF (AUDIOFILE_INCLUDE_DIR)
SET (CMAKE_FIND_FRAMEWORK NEVER)

FIND_PATH(AUDIOFILE_INCLUDE_DIR audiofile.h
  PATHS
  $ENV{AUDIOFILE_HOME}/include
  $ENV{EXTERNLIBS}/audiofile/include
  /usr/local/include
  /usr/include
  DOC "audiofile - Headers"
)

SET(AUDIOFILE_NAMES audiofile)
SET(AUDIOFILE_DBG_NAMES audiofiled)

FIND_LIBRARY(AUDIOFILE_LIBRARY NAMES ${AUDIOFILE_NAMES}
  PATHS
  $ENV{AUDIOFILE_HOME}/lib
  $ENV{EXTERNLIBS}/audiofile/lib
  DOC "audiofile - Library"
  #NO_DEFAULT_PATH
  PATH_SUFFIXES lib lib64
)
FIND_LIBRARY(AUDIOFILE_LIBRARY NAMES ${AUDIOFILE_NAMES} DOC "audiofile - Library")


INCLUDE(FindPackageHandleStandardArgs)

IF(MSVC)
  # VisualStudio needs a debug version
  FIND_LIBRARY(AUDIOFILE_LIBRARY_DEBUG NAMES ${AUDIOFILE_DBG_NAMES}
    PATHS
    $ENV{AUDIOFILE_HOME}/lib
    $ENV{EXTERNLIBS}/audiofile/lib
    DOC "audiofile - Library (Debug)"
  )
  
  IF(AUDIOFILE_LIBRARY_DEBUG AND AUDIOFILE_LIBRARY)
    SET(AUDIOFILE_LIBRARIES optimized ${AUDIOFILE_LIBRARY} debug ${AUDIOFILE_LIBRARY_DEBUG})
  ENDIF(AUDIOFILE_LIBRARY_DEBUG AND AUDIOFILE_LIBRARY)

  FIND_PACKAGE_HANDLE_STANDARD_ARGS(AUDIOFILE DEFAULT_MSG AUDIOFILE_LIBRARY AUDIOFILE_LIBRARY_DEBUG AUDIOFILE_INCLUDE_DIR)

  MARK_AS_ADVANCED(AUDIOFILE_LIBRARY AUDIOFILE_LIBRARY_DEBUG AUDIOFILE_INCLUDE_DIR)
  
ELSE(MSVC)
  # rest of the world
  SET(AUDIOFILE_LIBRARIES ${AUDIOFILE_LIBRARY})

  FIND_PACKAGE_HANDLE_STANDARD_ARGS(AUDIOFILE DEFAULT_MSG AUDIOFILE_LIBRARY AUDIOFILE_INCLUDE_DIR)
  
  MARK_AS_ADVANCED(AUDIOFILE_LIBRARY AUDIOFILE_INCLUDE_DIR)
  
ENDIF(MSVC)

IF(AUDIOFILE_FOUND)
  SET(AUDIOFILE_INCLUDE_DIRS ${AUDIOFILE_INCLUDE_DIR})
ENDIF(AUDIOFILE_FOUND)
