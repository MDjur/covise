# - Try to find the OpenSSL encryption library
# Once done this will define
#
#  OPENSSL_FOUND - system has the OpenSSL library
#  OPENSSL_INCLUDE_DIR - the OpenSSL include directory
#  OPENSSL_LIBRARIES - The libraries needed to use OpenSSL
#

IF(OPENSSL_INCLUDE_DIR)
   SET(OpenSSL_FIND_QUIETLY TRUE)
ENDIF(OPENSSL_INCLUDE_DIR)

FIND_PATH(OPENSSL_INCLUDE_DIR openssl/ssl.h
   PATHS
   $ENV{OPENSSL_HOME}/include
   $ENV{EXTERNLIBS}/openssl_static/include
   $ENV{EXTERNLIBS}/openssl/include
   DOC "OpenSSL - Headers"
   NO_DEFAULT_PATH
)
FIND_PATH(OPENSSL_INCLUDE_DIR openssl/ssl.h DOC "OpenSSL - Headers")

IF(WIN32 AND MSVC)
    # check whether this is a /MT(d) build
    STRING(REGEX MATCH "[mM][tT][dD]" MTD_COMPILE_OPTION ${CMAKE_C_FLAGS_DEBUG})
    IF (MTD_COMPILE_OPTION)
      # MESSAGE("Using static MS-Runtime !!!")
      FIND_LIBRARY(OPENSSL_SSL_DEBUG NAMES ssleay32MTd ssleay32D_mt
        PATHS
        $ENV{OPENSSL_HOME}/lib
        $ENV{EXTERNLIBS}/OpenSSL_static/lib
        $ENV{EXTERNLIBS}/OpenSSL/lib
      )
      FIND_LIBRARY(OPENSSL_SSL_RELEASE NAMES ssleay32MT ssleay32_mt
        PATHS
        $ENV{OPENSSL_HOME}/lib
        $ENV{EXTERNLIBS}/OpenSSL_static/lib
        $ENV{EXTERNLIBS}/OpenSSL/lib
      )
      FIND_LIBRARY(OPENSSL_CRYPTO_DEBUG NAMES libeay32MTd libeay32D_mt
        PATHS
        $ENV{OPENSSL_HOME}/lib
        $ENV{EXTERNLIBS}/OpenSSL_static/lib
        $ENV{EXTERNLIBS}/OpenSSL/lib
      )
      FIND_LIBRARY(OPENSSL_CRYPTO_RELEASE NAMES libeay32MT libeay32_mt
        PATHS
        $ENV{OPENSSL_HOME}/lib
        $ENV{EXTERNLIBS}/OpenSSL_static/lib
        $ENV{EXTERNLIBS}/OpenSSL/lib
      )
    ELSE (MTD_COMPILE_OPTION)
      FIND_LIBRARY(OPENSSL_SSL_DEBUG NAMES ssleay32MDd ssleay32D
        PATHS
        $ENV{OPENSSL_HOME}/lib
        $ENV{EXTERNLIBS}/OpenSSL_static/lib
        $ENV{EXTERNLIBS}/OpenSSL/lib
      )
      FIND_LIBRARY(OPENSSL_SSL_RELEASE NAMES ssleay32MD ssleay32
        PATHS
        $ENV{OPENSSL_HOME}/lib
        $ENV{EXTERNLIBS}/OpenSSL_static/lib
        $ENV{EXTERNLIBS}/OpenSSL/lib
      )
      FIND_LIBRARY(OPENSSL_CRYPTO_DEBUG NAMES libeay32MDd libeay32D
        PATHS
        $ENV{OPENSSL_HOME}/lib
        $ENV{EXTERNLIBS}/OpenSSL_static/lib
        $ENV{EXTERNLIBS}/OpenSSL/lib
      )
      FIND_LIBRARY(OPENSSL_CRYPTO_RELEASE NAMES libeay32MD libeay32
        PATHS
        $ENV{OPENSSL_HOME}/lib
        $ENV{EXTERNLIBS}/OpenSSL_static/lib
        $ENV{EXTERNLIBS}/OpenSSL/lib
      )
    ENDIF (MTD_COMPILE_OPTION)

    IF(CMAKE_CONFIGURATION_TYPES)
      IF (OPENSSL_SSL_DEBUG AND OPENSSL_SSL_RELEASE AND OPENSSL_CRYPTO_DEBUG AND OPENSSL_CRYPTO_RELEASE)
         SET(OPENSSL_LIBRARIES optimized ${OPENSSL_SSL_RELEASE} optimized ${OPENSSL_CRYPTO_RELEASE} debug ${OPENSSL_SSL_DEBUG} debug ${OPENSSL_CRYPTO_DEBUG})	 
      ELSE (OPENSSL_SSL_DEBUG AND OPENSSL_SSL_RELEASE AND OPENSSL_CRYPTO_DEBUG AND OPENSSL_CRYPTO_RELEASE)
         SET(OPENSSL_LIBRARIES NOTFOUND)
         MESSAGE(STATUS "Could not find the debug AND release version of openssl")
      ENDIF (OPENSSL_SSL_DEBUG AND OPENSSL_SSL_RELEASE AND OPENSSL_CRYPTO_DEBUG AND OPENSSL_CRYPTO_RELEASE)
    ELSE()
      STRING(TOLOWER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_TOLOWER)
      IF(CMAKE_BUILD_TYPE_TOLOWER MATCHES debug)
         SET(OPENSSL_LIBRARIES ${OPENSSL_SSL_DEBUG} ${OPENSSL_CRYPTO_DEBUG})
      ELSE(CMAKE_BUILD_TYPE_TOLOWER MATCHES debug)
         SET(OPENSSL_LIBRARIES ${OPENSSL_SSL_RELEASE} ${OPENSSL_CRYPTO_RELEASE})
      ENDIF(CMAKE_BUILD_TYPE_TOLOWER MATCHES debug)
    ENDIF()
    MARK_AS_ADVANCED(OPENSSL_SSL_DEBUG OPENSSL_SSL_RELEASE OPENSSL_CRYPTO_DEBUG OPENSSL_CRYPTO_RELEASE)
ELSE(WIN32 AND MSVC)

  FIND_LIBRARY(OPENSSL_SSL_LIBRARY NAMES ssl
    PATHS
    $ENV{OPENSSL_HOME}/lib
    $ENV{EXTERNLIBS}/OpenSSL/lib
    NO_DEFAULT_PATH
  )
  FIND_LIBRARY(OPENSSL_SSL_LIBRARY NAMES ssl)
  
  FIND_LIBRARY(OPENSSL_CRYPTO_LIBRARY NAMES crypto
    PATHS
    $ENV{OPENSSL_HOME}/lib
    $ENV{EXTERNLIBS}/OpenSSL/lib
    NO_DEFAULT_PATH
  )
  FIND_LIBRARY(OPENSSL_CRYPTO_LIBRARY NAMES crypto)

  SET(OPENSSL_LIBRARIES ${OPENSSL_SSL_LIBRARY} ${OPENSSL_CRYPTO_LIBRARY})
  
  MARK_AS_ADVANCED(OPENSSL_SSL_LIBRARY OPENSSL_CRYPTO_LIBRARY)

# possibility with pkg-config
#   FIND_PACKAGE(PkgConfig)
#   IF (PKG_CONFIG_FOUND)
#    #PKGCONFIG(libxml-2.0 _LibXml2IncDir _LibXml2LinkDir _LibXml2LinkFlags _LibXml2Cflags)
#    #SET(LIBXML2_DEFINITIONS ${_LibXml2Cflags})
#    pkg_search_module(OPENSSL openssl)
#    #pkg_check_modules(libcrypto)
#    MESSAGE(STATUS "OpenSSL LIBRARIES:    ${OPENSSL_LIBRARIES}")
#    MESSAGE(STATUS "OpenSSL INCLUDE DIRS: ${OPENSSL_INCLUDE_DIRS}")
#   ELSE (PKG_CONFIG_FOUND)
#     MESSAGE(STATUS "Could not find PkgConfig!")
#   ENDIF (PKG_CONFIG_FOUND)

ENDIF(WIN32 AND MSVC)

IF(OPENSSL_INCLUDE_DIR AND OPENSSL_LIBRARIES)
   SET(OPENSSL_FOUND TRUE)
ELSE(OPENSSL_INCLUDE_DIR AND OPENSSL_LIBRARIES)
   SET(OPENSSL_FOUND FALSE)
ENDIF (OPENSSL_INCLUDE_DIR AND OPENSSL_LIBRARIES)

IF (OPENSSL_FOUND)
   IF (NOT OpenSSL_FIND_QUIETLY)
      MESSAGE(STATUS "Found OpenSSL: ${OPENSSL_LIBRARIES}")
   ENDIF (NOT OpenSSL_FIND_QUIETLY)
ELSE (OPENSSL_FOUND)
   IF (OpenSSL_FIND_REQUIRED)
      MESSAGE(FATAL_ERROR "Could NOT find OpenSSL")
   ENDIF (OpenSSL_FIND_REQUIRED)
ENDIF (OPENSSL_FOUND)
MARK_AS_ADVANCED(OPENSSL_INCLUDE_DIR OPENSSL_LIBRARIES)

