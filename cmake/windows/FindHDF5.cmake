# - Try to find HDF5-library
# Once done this will define
#
#  HDF5_INCLUDE_DIR    - where to find HDF5.h, etc.
#  HDF5_INCLUDE_DIRS   - same as above (uncached version)
#  HDF5_LIBRARIES      - list of libraries when using HDF5.
#  HDF5_FOUND          - True if HDF5 was found.

IF(HDF5_INCLUDE_DIR)
  SET(HDF5_FIND_QUIETLY TRUE)
ENDIF(HDF5_INCLUDE_DIR)

FIND_PATH(HDF5_INCLUDE_DIR hdf5.h
   PATHS
   $ENV{HDF5_HOME}/include
   $ENV{EXTERNLIBS}/hdf5/include
   DOC "HDF5 - Headers"
   NO_DEFAULT_PATH
)
FIND_PATH(HDF5_INCLUDE_DIR HDF5.h DOC "HDF5 - Headers")

MARK_AS_ADVANCED(HDF5_INCLUDE_DIR)


IF (MSVC)
     
      FIND_LIBRARY(HDF5_LIBRARY_DEBUG NAMES libhdf5_d hdf5d hdf5_d HDF5d_i
        PATHS
        $ENV{HDF5_HOME}/lib
        $ENV{EXTERNLIBS}/HDF5/lib
      )
      FIND_LIBRARY(HDF5_LIBRARY_RELEASE NAMES libhdf5 hdf5 HDF5_i
        PATHS
        $ENV{HDF5_HOME}/lib
        $ENV{EXTERNLIBS}/HDF5/lib
      )
	  FIND_LIBRARY(HDF5_HL_LIBRARY_DEBUG NAMES libhdf5_hl_d hdf5_hld hdf5_hl_d HDF5d_i
        PATHS
        $ENV{HDF5_HOME}/lib
        $ENV{EXTERNLIBS}/HDF5/lib
      )
      FIND_LIBRARY(HDF5_HL_LIBRARY_RELEASE NAMES libhdf5_hl hdf5_hl HDF5_i
        PATHS
        $ENV{HDF5_HOME}/lib
        $ENV{EXTERNLIBS}/HDF5/lib
      )
      FIND_LIBRARY(HDF5_CXX_LIBRARY_DEBUG NAMES libhdf5_cpp_d hdf5d hdf5_cpp_d hdf5_cpp_Dd HDF5_cppd_i
        PATHS
        $ENV{HDF5_HOME}/lib
        $ENV{EXTERNLIBS}/HDF5/lib
      )
      FIND_LIBRARY(HDF5_CXX_LIBRARY_RELEASE NAMES libhdf5_cpp hdf5_cpp HDF5_cpp_i
        PATHS
        $ENV{HDF5_HOME}/lib
        $ENV{EXTERNLIBS}/HDF5/lib
      )
	  FIND_LIBRARY(HDF5_HL_CXX_LIBRARY_DEBUG NAMES libhdf5_hl_cpp_d hdf5_hl_cppd hdf5_hl_cpp_d hdf5_hl_cpp_Dd HDF5_hl_cppd_i
        PATHS
        $ENV{HDF5_HOME}/lib
        $ENV{EXTERNLIBS}/HDF5/lib
      )
      FIND_LIBRARY(HDF5_HL_CXX_LIBRARY_RELEASE NAMES libhdf5_hl_cpp hdf5_hl_cpp HDF5_hl_cpp_i
        PATHS
        $ENV{HDF5_HOME}/lib
        $ENV{EXTERNLIBS}/HDF5/lib
      )

    IF(CMAKE_CONFIGURATION_TYPES)
      IF (HDF5_LIBRARY_DEBUG AND HDF5_LIBRARY_RELEASE)
         SET(HDF5_LIBRARIES optimized ${HDF5_LIBRARY_RELEASE} debug ${HDF5_LIBRARY_DEBUG} optimized ${HDF5_HL_LIBRARY_RELEASE} debug ${HDF5_HL_LIBRARY_DEBUG})
      ELSE (HDF5_LIBRARY_DEBUG AND HDF5_LIBRARY_RELEASE)
         SET(HDF5_LIBRARIES NOTFOUND)
         MESSAGE(STATUS "Could not find the debug AND release version of HDF5")
      ENDIF (HDF5_LIBRARY_DEBUG AND HDF5_LIBRARY_RELEASE)
      IF (HDF5_HL_LIBRARY_DEBUG AND HDF5_HL_LIBRARY_RELEASE)
         SET(HDF5_HL_LIBRARIES ${HDF5_HL_LIBRARY_RELEASE} debug ${HDF5_HL_LIBRARY_DEBUG})
      ELSE (HDF5_HL_LIBRARY_DEBUG AND HDF5_HL_LIBRARY_RELEASE)
         SET(HDF5_HL_LIBRARIES NOTFOUND)
         MESSAGE(STATUS "Could not find the debug AND release version of HDF5_HL")
      ENDIF (HDF5_HL_LIBRARY_DEBUG AND HDF5_HL_LIBRARY_RELEASE)
      IF (HDF5_CXX_LIBRARY_DEBUG AND HDF5_CXX_LIBRARY_RELEASE)
         SET(HDF5_CXX_LIBRARIES optimized ${HDF5_CXX_LIBRARY_RELEASE} debug ${HDF5_CXX_LIBRARY_DEBUG} optimized ${HDF5_HL_CXX_LIBRARY_RELEASE} debug ${HDF5_HL_CXX_LIBRARY_DEBUG})
      ELSE (HDF5_CXX_LIBRARY_DEBUG AND HDF5_CXX_LIBRARY_RELEASE)
         SET(HDF5_CXX_LIBRARIES NOTFOUND)
         MESSAGE(STATUS "Could not find the debug AND release version of HDF5_CXX")
      ENDIF (HDF5_CXX_LIBRARY_DEBUG AND HDF5_CXX_LIBRARY_RELEASE)
	  
      IF (HDF5_HL_CXX_LIBRARY_DEBUG AND HDF5_HL_CXX_LIBRARY_RELEASE)
         SET(HDF5_HL_CXX_LIBRARIES ${HDF5_HL_CXX_LIBRARY_RELEASE} debug ${HDF5_HL_CXX_LIBRARY_DEBUG})
      ELSE (HDF5_HL_CXX_LIBRARY_DEBUG AND HDF5_HL_CXX_LIBRARY_RELEASE)
         SET(HDF5_HL_CXX_LIBRARIES NOTFOUND)
         MESSAGE(STATUS "Could not find the debug AND release version of HDF5_HL_CXX")
      ENDIF (HDF5_HL_CXX_LIBRARY_DEBUG AND HDF5_HL_CXX_LIBRARY_RELEASE)
    ELSE()
      STRING(TOLOWER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_TOLOWER)
      IF(CMAKE_BUILD_TYPE_TOLOWER MATCHES debug)
         SET(HDF5_LIBRARIES ${HDF5_LIBRARY_DEBUG} ${HDF5_HL_LIBRARY_DEBUG})
      ELSE(CMAKE_BUILD_TYPE_TOLOWER MATCHES debug)
         SET(HDF5_LIBRARIES ${HDF5_LIBRARY_RELEASE} ${HDF5_HL_LIBRARY_RELEASE})
      ENDIF(CMAKE_BUILD_TYPE_TOLOWER MATCHES debug)
    ENDIF()
    MARK_AS_ADVANCED(HDF5_LIBRARY_DEBUG HDF5_LIBRARY_RELEASE)

ELSE (MSVC)
  
  FIND_LIBRARY(HDF5_LIBRARY NAMES HDF5 hdf5
    PATHS
    $ENV{HDF5_HOME}/lib
    $ENV{EXTERNLIBS}/HDF5/lib
    NO_DEFAULT_PATH
  )
  FIND_LIBRARY(HDF5_LIBRARY NAMES HDF5 hdf5)

  IF (HDF5_LIBRARY)
    SET(HDF5_LIBRARIES ${HDF5_LIBRARY})
  ELSE (HDF5_LIBRARY)
    SET(HDF5_LIBRARIES NOTFOUND)
    MESSAGE(STATUS "Could not find HDF5-library")    
  ENDIF (HDF5_LIBRARY)
  MARK_AS_ADVANCED(HDF5_LIBRARY)
  
ENDIF (MSVC)

INCLUDE(FindPackageHandleStandardArgs)

IF(MSVC)
  FIND_PACKAGE_HANDLE_STANDARD_ARGS(HDF5 DEFAULT_MSG HDF5_LIBRARY_RELEASE HDF5_LIBRARY_DEBUG HDF5_INCLUDE_DIR)
  MARK_AS_ADVANCED(HDF5_LIBRARY_RELEASE HDF5_LIBRARY_DEBUG)
ELSE(MSVC)
  FIND_PACKAGE_HANDLE_STANDARD_ARGS(HDF5 DEFAULT_MSG HDF5_LIBRARY HDF5_INCLUDE_DIR)
  MARK_AS_ADVANCED(HDF5_LIBRARY)
ENDIF(MSVC)
